{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password","minLength","isSignup","checkValidity","rules","isValid","trim","length","maxLength","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthHandler","prevState","this","bulidingBurger","authRedirectPath","onSetAuthRedirectPath","formElementArray","key","push","id","config","form","map","el","shouldValidate","inValid","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Label","label","module","exports"],"mappings":"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","file":"static/js/4.4d527f44.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport classes from './Auth.module.css'\r\nimport * as actions from '../../components/store/actions/index'\r\nimport {connect} from 'react-redux'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls:{\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Mail Address'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            password:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'password',\r\n                    placeholder:'Password'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength:6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            }\r\n        },\r\n        isSignup:false\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.bulidingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    checkValidity = (value,rules) => {\r\n        let isValid = true\r\n        if(rules.required){\r\n            isValid = value.trim() !== '' && isValid\r\n        }\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n        if(rules.maxLength){\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event,controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName] : {\r\n                ...this.state.controls[controlName],\r\n                value:event.target.value,\r\n                valid:this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                touched:true\r\n            }\r\n        }\r\n        this.setState({controls:updatedControls})\r\n    }\r\n\r\n    submitHandler =(event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup)\r\n    }\r\n\r\n    switchAuthHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignup:!prevState.isSignup\r\n            }\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for(let key in this.state.controls){\r\n            formElementArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            })\r\n        }\r\n\r\n        let form = formElementArray.map(el =>(\r\n            <Input \r\n                key={el.id}\r\n                shouldValidate={el.config.validation}\r\n                inValid={!el.config.valid}\r\n                touched={el.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event,el.id)} \r\n                elementType={el.config.elementType} \r\n                elementConfig={el.config.elementConfig} \r\n                value={el.config.value} \r\n            />\r\n            \r\n        ))\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner/>\r\n        }\r\n\r\n        let errorMessage = null\r\n        if(this.props.error){\r\n            errorMessage = (<p>{this.props.error.message}</p>)\r\n        }\r\n\r\n        let authRedirect = null\r\n        if(this.props.isAuthenticated){\r\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">Submit</Button>\r\n                </form>\r\n                <Button btnType=\"Danger\" clicked={this.switchAuthHandler}>Switch to {this.state.isSignup ? \"Sign up\" : \"Sign in\"}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated:state.auth.token !== null,\r\n        bulidingBurger:state.burgerBuilder.building,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email,password,isSignup) => dispatch(actions.auth(email,password,isSignup)),\r\n        onSetAuthRedirectPath : () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth)","import classes from './Input.module.css'\nimport React from 'react'\n\n\nconst input = (props) =>{\n\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n    if(props.inValid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n    switch(props.elementType){\n        case('input'):\n            inputElement=<input className={inputClasses.join(\" \")} onChange={props.changed} {...props.elementConfig} value={props.value}/>\n            break\n        case('textarea'):\n            inputElement=<textarea className={inputClasses.join(\" \")} onChange={props.changed} {...props.elementConfig} value={props.value}/>\n            break\n        case('select'):\n            inputElement=<select \n                className={inputClasses.join(\" \")} onChange={props.changed} \n                value={props.value}>\n                    {props.elementConfig.options.map(option => (\n                            <option \n                                key={option.value}\n                                value={option.value} >\n                                {option.displayValue}\n                            </option>\n                            )\n                        )\n                    }\n            </select>\n            break\n        default:\n            inputElement=<input className={inputClasses.join(\" \")} onChange={props.changed} {...props.elementConfig} value={props.value}/>\n    }\n\n\n    return(\n        <div>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\n\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3BuOy\",\"Label\":\"Input_Label__cfpa2\",\"InputElement\":\"Input_InputElement__3o5ui\",\"Invalid\":\"Input_Invalid__2_Kl9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2IqmA\",\"Input\":\"Auth_Input__19gfY\"};"],"sourceRoot":""}