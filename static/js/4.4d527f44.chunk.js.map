{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password","minLength","isSignup","checkValidity","rules","isValid","trim","length","maxLength","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthHandler","prevState","this","bulidingBurger","authRedirectPath","onSetAuthRedirectPath","formElementArray","key","push","id","config","form","map","el","shouldValidate","inValid","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Label","label","module","exports"],"mappings":"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","file":"static/js/4.4d527f44.chunk.js","sourcesContent":["import React,{Component} from 'react'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport classes from './Auth.module.css'\nimport * as actions from '../../components/store/actions/index'\nimport {connect} from 'react-redux'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport {Redirect} from 'react-router-dom'\n\nclass Auth extends Component {\n\n    state = {\n        controls:{\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'Mail Address'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                },\n                valid:false,\n                touched:false\n            },\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'Password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength:6\n                },\n                valid:false,\n                touched:false\n            }\n        },\n        isSignup:false\n    }\n\n    componentDidMount(){\n        if(!this.props.bulidingBurger && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    checkValidity = (value,rules) => {\n        let isValid = true\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid\n        }\n        if(rules.maxLength){\n            isValid = value.length <= rules.maxLength && isValid\n        }\n        return isValid;\n    }\n\n    inputChangedHandler = (event,controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName] : {\n                ...this.state.controls[controlName],\n                value:event.target.value,\n                valid:this.checkValidity(event.target.value,this.state.controls[controlName].validation),\n                touched:true\n            }\n        }\n        this.setState({controls:updatedControls})\n    }\n\n    submitHandler =(event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup)\n    }\n\n    switchAuthHandler = () => {\n        this.setState(prevState => {\n            return {\n                isSignup:!prevState.isSignup\n            }\n        })\n    }\n\n    render(){\n        const formElementArray = [];\n        for(let key in this.state.controls){\n            formElementArray.push({\n                id:key,\n                config:this.state.controls[key]\n            })\n        }\n\n        let form = formElementArray.map(el =>(\n            <Input \n                key={el.id}\n                shouldValidate={el.config.validation}\n                inValid={!el.config.valid}\n                touched={el.config.touched}\n                changed={(event) => this.inputChangedHandler(event,el.id)} \n                elementType={el.config.elementType} \n                elementConfig={el.config.elementConfig} \n                value={el.config.value} \n            />\n            \n        ))\n\n        if(this.props.loading){\n            form = <Spinner/>\n        }\n\n        let errorMessage = null\n        if(this.props.error){\n            errorMessage = (<p>{this.props.error.message}</p>)\n        }\n\n        let authRedirect = null\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">Submit</Button>\n                </form>\n                <Button btnType=\"Danger\" clicked={this.switchAuthHandler}>Switch to {this.state.isSignup ? \"Sign up\" : \"Sign in\"}</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading:state.auth.loading,\n        error:state.auth.error,\n        isAuthenticated:state.auth.token !== null,\n        bulidingBurger:state.burgerBuilder.building,\n        authRedirectPath:state.auth.authRedirectPath\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email,password,isSignup) => dispatch(actions.auth(email,password,isSignup)),\n        onSetAuthRedirectPath : () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n};\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth)","import classes from './Input.module.css'\nimport React from 'react'\n\n\nconst input = (props) =>{\n\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n    if(props.inValid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n    switch(props.elementType){\n        case('input'):\n            inputElement=<input className={inputClasses.join(\" \")} onChange={props.changed} {...props.elementConfig} value={props.value}/>\n            break\n        case('textarea'):\n            inputElement=<textarea className={inputClasses.join(\" \")} onChange={props.changed} {...props.elementConfig} value={props.value}/>\n            break\n        case('select'):\n            inputElement=<select \n                className={inputClasses.join(\" \")} onChange={props.changed} \n                value={props.value}>\n                    {props.elementConfig.options.map(option => (\n                            <option \n                                key={option.value}\n                                value={option.value} >\n                                {option.displayValue}\n                            </option>\n                            )\n                        )\n                    }\n            </select>\n            break\n        default:\n            inputElement=<input className={inputClasses.join(\" \")} onChange={props.changed} {...props.elementConfig} value={props.value}/>\n    }\n\n\n    return(\n        <div>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\n\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3BuOy\",\"Label\":\"Input_Label__cfpa2\",\"InputElement\":\"Input_InputElement__3o5ui\",\"Invalid\":\"Input_Invalid__2_Kl9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2IqmA\",\"Input\":\"Auth_Input__19gfY\"};"],"sourceRoot":""}